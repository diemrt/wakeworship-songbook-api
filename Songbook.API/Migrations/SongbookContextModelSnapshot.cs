// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Songbook.Infrastructure;

#nullable disable

namespace Songbook.API.Migrations
{
    [DbContext(typeof(SongbookContext))]
    partial class SongbookContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Songbook.Domain.Entities.v1.ChordType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)")
                        .HasColumnName("id");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(182)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("display_name");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("insert_date")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.ToTable("chord_type", "dbo");
                });

            modelBuilder.Entity("Songbook.Domain.Entities.v1.PhraseChord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("ChordTypeId")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)")
                        .HasColumnName("chord_type_id");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("insert_date")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Phrase")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("phrase");

                    b.Property<int>("PositionInRow")
                        .HasColumnType("int")
                        .HasColumnName("position_in_row");

                    b.Property<Guid>("SongRowId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("song_row_id");

                    b.HasKey("Id");

                    b.HasIndex("ChordTypeId");

                    b.HasIndex("SongRowId");

                    b.ToTable("phrase_chord", "dbo");
                });

            modelBuilder.Entity("Songbook.Domain.Entities.v1.Song", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int?>("Capo")
                        .HasColumnType("int")
                        .HasColumnName("capo");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("insert_date")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)")
                        .HasColumnName("key");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("Key");

                    b.ToTable("song", "dbo");
                });

            modelBuilder.Entity("Songbook.Domain.Entities.v1.SongBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("insert_date")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("PositionInSong")
                        .HasColumnType("int")
                        .HasColumnName("position_in_song");

                    b.Property<string>("SongBlockTypeId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("song_block_type_id");

                    b.Property<Guid>("SongId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("song_id");

                    b.HasKey("Id");

                    b.HasIndex("SongBlockTypeId");

                    b.HasIndex("SongId");

                    b.ToTable("song_block", "dbo");
                });

            modelBuilder.Entity("Songbook.Domain.Entities.v1.SongBlockType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("id");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(182)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("display_name");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("insert_date")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.ToTable("song_block_type", "dbo");
                });

            modelBuilder.Entity("Songbook.Domain.Entities.v1.SongRow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("insert_date")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("PositionInBlock")
                        .HasColumnType("int")
                        .HasColumnName("position_in_block");

                    b.Property<Guid>("SongBlockId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("song_block_id");

                    b.HasKey("Id");

                    b.HasIndex("SongBlockId");

                    b.ToTable("song_row", "dbo");
                });

            modelBuilder.Entity("Songbook.Domain.Entities.v1.PhraseChord", b =>
                {
                    b.HasOne("Songbook.Domain.Entities.v1.ChordType", "ChordType")
                        .WithMany("PhraseChords")
                        .HasForeignKey("ChordTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Songbook.Domain.Entities.v1.SongRow", "SongRow")
                        .WithMany("PhraseChords")
                        .HasForeignKey("SongRowId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChordType");

                    b.Navigation("SongRow");
                });

            modelBuilder.Entity("Songbook.Domain.Entities.v1.Song", b =>
                {
                    b.HasOne("Songbook.Domain.Entities.v1.ChordType", "ChordType")
                        .WithMany("Songs")
                        .HasForeignKey("Key")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChordType");
                });

            modelBuilder.Entity("Songbook.Domain.Entities.v1.SongBlock", b =>
                {
                    b.HasOne("Songbook.Domain.Entities.v1.SongBlockType", "SongBlockType")
                        .WithMany("SongBlocks")
                        .HasForeignKey("SongBlockTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Songbook.Domain.Entities.v1.Song", "Song")
                        .WithMany("SongBlocks")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Song");

                    b.Navigation("SongBlockType");
                });

            modelBuilder.Entity("Songbook.Domain.Entities.v1.SongRow", b =>
                {
                    b.HasOne("Songbook.Domain.Entities.v1.SongBlock", "SongBlock")
                        .WithMany("SongRows")
                        .HasForeignKey("SongBlockId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SongBlock");
                });

            modelBuilder.Entity("Songbook.Domain.Entities.v1.ChordType", b =>
                {
                    b.Navigation("PhraseChords");

                    b.Navigation("Songs");
                });

            modelBuilder.Entity("Songbook.Domain.Entities.v1.Song", b =>
                {
                    b.Navigation("SongBlocks");
                });

            modelBuilder.Entity("Songbook.Domain.Entities.v1.SongBlock", b =>
                {
                    b.Navigation("SongRows");
                });

            modelBuilder.Entity("Songbook.Domain.Entities.v1.SongBlockType", b =>
                {
                    b.Navigation("SongBlocks");
                });

            modelBuilder.Entity("Songbook.Domain.Entities.v1.SongRow", b =>
                {
                    b.Navigation("PhraseChords");
                });
#pragma warning restore 612, 618
        }
    }
}
